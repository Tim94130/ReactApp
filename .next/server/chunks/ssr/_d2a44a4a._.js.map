{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/timot/Documents/BACHELOR-3-DEV/REACT/projet-tvmaze/src/app/components/EpisodeList.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/components/EpisodeList.jsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/components/EpisodeList.jsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/timot/Documents/BACHELOR-3-DEV/REACT/projet-tvmaze/src/app/components/EpisodeList.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/components/EpisodeList.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/components/EpisodeList.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/timot/Documents/BACHELOR-3-DEV/REACT/projet-tvmaze/src/app/components/ActorList.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/components/ActorList.jsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/components/ActorList.jsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoS,GACjU,kEACA","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/timot/Documents/BACHELOR-3-DEV/REACT/projet-tvmaze/src/app/components/ActorList.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/components/ActorList.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/components/ActorList.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgR,GAC7S,8CACA","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/timot/Documents/BACHELOR-3-DEV/REACT/projet-tvmaze/src/app/series/%5Bid%5D/page.tsx"],"sourcesContent":["// src/app/series/[id]/page.tsx\nimport EpisodeList from '@/app/components/EpisodeList'\nimport ActorList from '@/app/components/ActorList'\nimport parse from 'html-react-parser'\n\ninterface SeriesPageProps {\n  params: { id: string }\n}\n\ninterface Show {\n  id: number\n  name: string\n  image: { medium: string; original: string } | null\n  summary: string\n  genres: string[]\n  premiered: string\n  rating: { average: number | null }\n}\n\ninterface Season {\n  id: number\n  number: number\n}\n\ninterface Episode {\n  id: number\n  name: string\n  number: number\n  summary: string\n  season: number\n}\n\ninterface CastEntry {\n  person: {\n    id: number\n    name: string\n    image?: { medium: string; original: string }\n  }\n  character: {\n    name: string\n    image?: { medium: string; original: string }\n  }\n}\n\nasync function getShowDetails(id: string): Promise<Show> {\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}`, { cache: 'no-store' })\n  if (!res.ok) throw new Error('Erreur lors du chargement de la série')\n  return res.json()\n}\n\nasync function getSeasons(showId: string): Promise<Season[]> {\n  const res = await fetch(`https://api.tvmaze.com/shows/${showId}/seasons`, { cache: 'no-store' })\n  return res.json()\n}\n\nasync function getEpisodes(seasonId: number): Promise<Episode[]> {\n  const res = await fetch(`https://api.tvmaze.com/seasons/${seasonId}/episodes`, { cache: 'no-store' })\n  return res.json()\n}\n\nasync function getCast(showId: string): Promise<CastEntry[]> {\n  const res = await fetch(`https://api.tvmaze.com/shows/${showId}/cast`, { cache: 'no-store' })\n  return res.json()\n}\n\nexport default async function SeriesPage({ params }: SeriesPageProps) {\n  const { id } = params\n  const show = await getShowDetails(id)\n  const seasons = await getSeasons(id)\n  const cast = await getCast(id)\n\n  const episodesBySeason = await Promise.all(\n    seasons.map(async season => ({\n      seasonNumber: season.number,\n      episodes: await getEpisodes(season.id),\n    }))\n  )\n\n  return (\n    <main className=\"bg-gray-100 min-h-screen py-10\">\n      <div className=\"max-w-5xl mx-auto bg-white rounded-2xl shadow-xl overflow-hidden\">\n        <div className=\"md:flex\">\n          {/* Poster */}\n          {show.image?.original && (\n            <div className=\"md:w-1/3\">\n              <img\n                src={show.image.original}\n                alt={show.name}\n                className=\"object-cover w-full h-full\"\n              />\n            </div>\n          )}\n\n          {/* Details */}\n          <div className=\"p-8 md:w-2/3\">\n            <h1 className=\"text-4xl font-extrabold mb-4 text-sky-800\">{show.name}</h1>\n            <div className=\"prose prose-slate max-w-none text-gray-700 mb-6\">\n              {parse(show.summary || '')}\n            </div>\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              {show.genres.map((g) => (\n                <span\n                  key={g}\n                  className=\"bg-sky-200 text-sky-800 text-sm font-medium px-3 py-1 rounded-full\"\n                >\n                  {g}\n                </span>\n              ))}\n            </div>\n            <div className=\"flex flex-wrap text-gray-600 text-sm gap-6\">\n              <div><strong>Première :</strong> {show.premiered || 'N/A'}</div>\n              <div><strong>Note :</strong> {show.rating.average ?? 'Non notée'}</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Seasons & Episodes */}\n        <section className=\"p-8 border-t\">\n          <h2 className=\"text-2xl font-bold mb-6 text-sky-700\">Saisons & épisodes</h2>\n          <div className=\"space-y-8\">\n            {episodesBySeason.map(({ seasonNumber, episodes }) => (\n              <EpisodeList\n                key={seasonNumber}\n                seasonNumber={seasonNumber}\n                episodes={episodes}\n              />\n            ))}\n          </div>\n        </section>\n\n        {/* Cast */}\n        <section className=\"p-8 border-t\">\n          <ActorList cast={cast} />\n        </section>\n      </div>\n    </main>\n  )\n}\n"],"names":[],"mappings":"AAAA,+BAA+B;;;;;AAC/B;AACA;AACA;AAAA;;;;;AAyCA,eAAe,eAAe,EAAU;IACtC,MAAM,MAAM,MAAM,MAAM,CAAC,6BAA6B,EAAE,IAAI,EAAE;QAAE,OAAO;IAAW;IAClF,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM;IAC7B,OAAO,IAAI,IAAI;AACjB;AAEA,eAAe,WAAW,MAAc;IACtC,MAAM,MAAM,MAAM,MAAM,CAAC,6BAA6B,EAAE,OAAO,QAAQ,CAAC,EAAE;QAAE,OAAO;IAAW;IAC9F,OAAO,IAAI,IAAI;AACjB;AAEA,eAAe,YAAY,QAAgB;IACzC,MAAM,MAAM,MAAM,MAAM,CAAC,+BAA+B,EAAE,SAAS,SAAS,CAAC,EAAE;QAAE,OAAO;IAAW;IACnG,OAAO,IAAI,IAAI;AACjB;AAEA,eAAe,QAAQ,MAAc;IACnC,MAAM,MAAM,MAAM,MAAM,CAAC,6BAA6B,EAAE,OAAO,KAAK,CAAC,EAAE;QAAE,OAAO;IAAW;IAC3F,OAAO,IAAI,IAAI;AACjB;AAEe,eAAe,WAAW,EAAE,MAAM,EAAmB;IAClE,MAAM,EAAE,EAAE,EAAE,GAAG;IACf,MAAM,OAAO,MAAM,eAAe;IAClC,MAAM,UAAU,MAAM,WAAW;IACjC,MAAM,OAAO,MAAM,QAAQ;IAE3B,MAAM,mBAAmB,MAAM,QAAQ,GAAG,CACxC,QAAQ,GAAG,CAAC,OAAM,SAAU,CAAC;YAC3B,cAAc,OAAO,MAAM;YAC3B,UAAU,MAAM,YAAY,OAAO,EAAE;QACvC,CAAC;IAGH,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;wBAEZ,KAAK,KAAK,EAAE,0BACX,8OAAC;4BAAI,WAAU;sCACb,cAAA,8OAAC;gCACC,KAAK,KAAK,KAAK,CAAC,QAAQ;gCACxB,KAAK,KAAK,IAAI;gCACd,WAAU;;;;;;;;;;;sCAMhB,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAG,WAAU;8CAA6C,KAAK,IAAI;;;;;;8CACpE,8OAAC;oCAAI,WAAU;8CACZ,CAAA,GAAA,wKAAA,CAAA,UAAK,AAAD,EAAE,KAAK,OAAO,IAAI;;;;;;8CAEzB,8OAAC;oCAAI,WAAU;8CACZ,KAAK,MAAM,CAAC,GAAG,CAAC,CAAC,kBAChB,8OAAC;4CAEC,WAAU;sDAET;2CAHI;;;;;;;;;;8CAOX,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;;8DAAI,8OAAC;8DAAO;;;;;;gDAAmB;gDAAE,KAAK,SAAS,IAAI;;;;;;;sDACpD,8OAAC;;8DAAI,8OAAC;8DAAO;;;;;;gDAAe;gDAAE,KAAK,MAAM,CAAC,OAAO,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;8BAM3D,8OAAC;oBAAQ,WAAU;;sCACjB,8OAAC;4BAAG,WAAU;sCAAuC;;;;;;sCACrD,8OAAC;4BAAI,WAAU;sCACZ,iBAAiB,GAAG,CAAC,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,iBAC/C,8OAAC,wIAAA,CAAA,UAAW;oCAEV,cAAc;oCACd,UAAU;mCAFL;;;;;;;;;;;;;;;;8BASb,8OAAC;oBAAQ,WAAU;8BACjB,cAAA,8OAAC,sIAAA,CAAA,UAAS;wBAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;AAK3B","debugId":null}}]
}