{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/timot/Documents/BACHELOR-3-DEV/REACT/projet-tvmaze/src/app/series/%5Bid%5D/page.tsx"],"sourcesContent":["// pas besoin de \"use client\" ici car c'est un composant serveur\nimport { ChevronDown } from 'lucide-react'\nimport parse from 'html-react-parser'\n\ninterface SeriesPageProps {\n  params: {\n    id: string\n  }\n}\n\ninterface Show {\n  id: number\n  name: string\n  image: { medium: string; original: string } | null\n  summary: string\n  genres: string[]\n  premiered: string\n  rating: { average: number | null }\n}\n\ninterface Season {\n  id: number\n  number: number\n}\n\ninterface Episode {\n  id: number\n  name: string\n  number: number\n  summary: string\n  season: number\n}\n\nasync function getShowDetails(id: string): Promise<Show> {\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}`, {\n    cache: 'no-store',\n  })\n  if (!res.ok) throw new Error('Erreur lors du chargement de la série')\n  return res.json()\n}\n\nasync function getSeasons(showId: string): Promise<Season[]> {\n  const res = await fetch(`https://api.tvmaze.com/shows/${showId}/seasons`)\n  return res.json()\n}\n\nasync function getEpisodes(seasonId: number): Promise<Episode[]> {\n  const res = await fetch(`https://api.tvmaze.com/seasons/${seasonId}/episodes`)\n  return res.json()\n}\n\nexport default async function SeriesPage(props: SeriesPageProps) {\n  const { id } = await props.params\n  const show = await getShowDetails(id)\n  const seasons = await getSeasons(id)\n\n  const episodesBySeason = await Promise.all(\n    seasons.map(async (season) => {\n      const episodes = await getEpisodes(season.id)\n      return {\n        seasonNumber: season.number,\n        episodes,\n      }\n    })\n  )\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <h1 className=\"text-3xl font-bold mb-4 text-sky-800\">{show.name}</h1>\n\n      {show.image && (\n        <img\n          src={show.image.original}\n          alt={show.name}\n          className=\"w-full h-auto rounded shadow mb-4\"\n        />\n      )}\n\n      <div className=\"text-gray-700 mb-4\">\n        {parse(show.summary || '')}\n      </div>\n\n      <p className=\"text-sm text-gray-600\">\n        <strong>Genres :</strong> {show.genres.join(', ') || 'N/A'}\n      </p>\n\n      <p className=\"text-sm text-gray-600\">\n        <strong>Première diffusion :</strong> {show.premiered || 'N/A'}\n      </p>\n\n      <p className=\"text-sm text-gray-600 mb-8\">\n        <strong>Note :</strong> {show.rating.average ?? 'Non notée'}\n      </p>\n\n      <h2 className=\"text-2xl font-bold mb-4 text-sky-700\">Saisons & épisodes</h2>\n\n      {episodesBySeason.map(({ seasonNumber, episodes }) => (\n        <div key={seasonNumber} className=\"mb-6\">\n          <h3 className=\"text-xl font-semibold mb-2 text-sky-600\">\n            Saison {seasonNumber}\n          </h3>\n          <ul className=\"space-y-2\">\n            {episodes.map((ep) => (\n              <li\n                key={ep.id}\n                className=\"border rounded p-3 bg-gray-50 hover:bg-gray-100 transition\"\n              >\n                <details className=\"group\">\n                  <summary className=\"cursor-pointer flex items-center justify-between text-sky-500 font-medium\">\n                    <span>\n                      Épisode {ep.number} : {ep.name}\n                    </span>\n                    <ChevronDown className=\"ml-2 h-4 w-4 transition-transform group-open:rotate-180\" />\n                  </summary>\n\n                  <div className=\"text-sm text-gray-700 mt-2\">\n                    {parse(ep.summary || 'Pas de résumé disponible.')}\n                  </div>\n                </details>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  )\n}\n"],"names":[],"mappings":"AAAA,gEAAgE;;;;;AAChE;AACA;AAAA;;;;AA+BA,eAAe,eAAe,EAAU;IACtC,MAAM,MAAM,MAAM,MAAM,CAAC,6BAA6B,EAAE,IAAI,EAAE;QAC5D,OAAO;IACT;IACA,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM;IAC7B,OAAO,IAAI,IAAI;AACjB;AAEA,eAAe,WAAW,MAAc;IACtC,MAAM,MAAM,MAAM,MAAM,CAAC,6BAA6B,EAAE,OAAO,QAAQ,CAAC;IACxE,OAAO,IAAI,IAAI;AACjB;AAEA,eAAe,YAAY,QAAgB;IACzC,MAAM,MAAM,MAAM,MAAM,CAAC,+BAA+B,EAAE,SAAS,SAAS,CAAC;IAC7E,OAAO,IAAI,IAAI;AACjB;AAEe,eAAe,WAAW,KAAsB;IAC7D,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,MAAM,MAAM;IACjC,MAAM,OAAO,MAAM,eAAe;IAClC,MAAM,UAAU,MAAM,WAAW;IAEjC,MAAM,mBAAmB,MAAM,QAAQ,GAAG,CACxC,QAAQ,GAAG,CAAC,OAAO;QACjB,MAAM,WAAW,MAAM,YAAY,OAAO,EAAE;QAC5C,OAAO;YACL,cAAc,OAAO,MAAM;YAC3B;QACF;IACF;IAGF,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAwC,KAAK,IAAI;;;;;;YAE9D,KAAK,KAAK,kBACT,8OAAC;gBACC,KAAK,KAAK,KAAK,CAAC,QAAQ;gBACxB,KAAK,KAAK,IAAI;gBACd,WAAU;;;;;;0BAId,8OAAC;gBAAI,WAAU;0BACZ,CAAA,GAAA,wKAAA,CAAA,UAAK,AAAD,EAAE,KAAK,OAAO,IAAI;;;;;;0BAGzB,8OAAC;gBAAE,WAAU;;kCACX,8OAAC;kCAAO;;;;;;oBAAiB;oBAAE,KAAK,MAAM,CAAC,IAAI,CAAC,SAAS;;;;;;;0BAGvD,8OAAC;gBAAE,WAAU;;kCACX,8OAAC;kCAAO;;;;;;oBAA6B;oBAAE,KAAK,SAAS,IAAI;;;;;;;0BAG3D,8OAAC;gBAAE,WAAU;;kCACX,8OAAC;kCAAO;;;;;;oBAAe;oBAAE,KAAK,MAAM,CAAC,OAAO,IAAI;;;;;;;0BAGlD,8OAAC;gBAAG,WAAU;0BAAuC;;;;;;YAEpD,iBAAiB,GAAG,CAAC,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,iBAC/C,8OAAC;oBAAuB,WAAU;;sCAChC,8OAAC;4BAAG,WAAU;;gCAA0C;gCAC9C;;;;;;;sCAEV,8OAAC;4BAAG,WAAU;sCACX,SAAS,GAAG,CAAC,CAAC,mBACb,8OAAC;oCAEC,WAAU;8CAEV,cAAA,8OAAC;wCAAQ,WAAU;;0DACjB,8OAAC;gDAAQ,WAAU;;kEACjB,8OAAC;;4DAAK;4DACK,GAAG,MAAM;4DAAC;4DAAI,GAAG,IAAI;;;;;;;kEAEhC,8OAAC,oNAAA,CAAA,cAAW;wDAAC,WAAU;;;;;;;;;;;;0DAGzB,8OAAC;gDAAI,WAAU;0DACZ,CAAA,GAAA,wKAAA,CAAA,UAAK,AAAD,EAAE,GAAG,OAAO,IAAI;;;;;;;;;;;;mCAZpB,GAAG,EAAE;;;;;;;;;;;mBAPR;;;;;;;;;;;AA6BlB","debugId":null}}]
}